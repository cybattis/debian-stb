{
	"print new line": {
		"prefix": "nl",
		"body": [
			"putchar('\\n');"
		],
		"description": "print new line"
	},
	"Quick printf": {
		"prefix": "qprint",
		"body": "printf(\"${1:text}%${2:type}\\n\", ${3:var});",
		"description": "Formated printf"
	},

	"Default template": {
		"prefix": "tp-default",
		"body": [
			"#include <stdio.h>",
			"",
			"int main(int argc, char const *argv[])",
			"{",
			"    ",
			"    return 0;",
			"}"
		],
		"description": "Default template"
	},

	"arg_template": {
		"prefix": "arg_template",
		"body": [
			"while(--argc > 0 && ((*++argv)[0] == '-')) {",
			"    while (c = *++argv[0]) {",
			"        switch (c) {",
			"            case '$1':",
			"                ${2:/* code */}",
			"                break;",
			"            default:",
			"                printf(\"error: option %c unknown\\n\", c);",
			"                argc = 0;",
			"                break;",
			"        }",
			"    }",
			"}"
		],
		"description": "Template for using argument"
	},
	"CLI window main loop": {
		"prefix": "tp-cli-window-loop",
		"body": [
			"#include \"include/libterm.h\"",
			"#include <stdlib.h>",
			"",
			"#define ON  1",
			"#define OFF 0",
			"",
			"int main(void)",
			"{",
			"    int prgm_state = ON;",
			"    cursor_pos = 0;",
			"",
			"    WINDOW_TITLE(${1});",
			"    init_screen(${2:height}, ${3:width});   ",
			"    main_screen();",
			"    refresh();",
			"",
			"    do {",
			"        if ((prgm_state = get_input()) == OFF) {",
			"            EXIT_SCREEN();",
			"            exit(EXIT_SUCCESS);",
			"        }",
			"    }while (1);",
			"",
			"    return 0;",
			"}"
		],
		"description": "Template for creating a window for a CLI program"
	},
	"putout": {
		"prefix": "putout",
		"body": "ft_putchar_fd('${1}', STDOUT_FILENO);",
		"description": "Print character to stdout"
	},
	"putin": {
		"prefix": "putin",
		"body": "ft_putchar_fd('${1}', STDIN_FILENO);",
		"description": "Print character to stdout"
	},
	"puterr": {
		"prefix": "puterr",
		"body": "ft_putchar_fd('${1}', STDERR_FILENO);",
		"description": "Print character to stdout"
	},
	"putsout": {
		"prefix": "putsout",
		"body": "ft_putstr_fd(\"${1}\", STDOUT_FILENO);",
		"description": "Print string to stdout"
	},
	"putsin": {
		"prefix": "putsin",
		"body": "ft_putstr_fd(\"${1}\", STDIN_FILENO);",
		"description": "Print string to stdout"
	},
	"putserr": {
		"prefix": "putserr",
		"body": "ft_putstr_fd(\"${1}\", STDERR_FILENO);",
		"description": "Print string to stdout"
	},
	"putnlout": {
		"prefix": "putnlout",
		"body": "ft_putendl_fd(\"${1}\", STDOUT_FILENO);",
		"description": "Print string and a new line to stdout"
	},
	"putnlin": {
		"prefix": "putnlin",
		"body": "ft_putendl_fd(\"${1}\", STDIN_FILENO);",
		"description": "Print string and a new line to stdout"
	},
	"putnlerr": {
		"prefix": "putnlerr",
		"body": "ft_putendl_fd(\"${1}\", STDERR_FILENO);",
		"description": "Print string and a new line to stdout"
	},
	"putnbr_out": {
		"prefix": "putnbout",
		"body": "ft_putnbr_fd(${1}, STDOUT_FILENO);",
		"description": "Print number to stdout"
	},
	"putnbr_in": {
		"prefix": "putnblin",
		"body": "ft_putnbr_fd(${1}, STDIN_FILENO);",
		"description": "Print number to stdout"
	},
	"putnbr_err": {
		"prefix": "putnberr",
		"body": "ft_putnbr_fd(${1}, STDERR_FILENO);",
		"description": "Print number to stdout"
	}
}