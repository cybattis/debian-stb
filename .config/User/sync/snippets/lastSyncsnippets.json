{"ref":"bd4632a5-850b-4846-9813-3cafa8621546","content":"{\"version\":1,\"machineId\":\"30d1da9c-0253-48e4-9ea8-dd849f65562f\",\"content\":\"{\\\"c.json\\\":\\\"{\\\\n\\\\t\\\\\\\"print new line\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"nl\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\t\\\\\\\"putchar('\\\\\\\\\\\\\\\\n');\\\\\\\"\\\\n\\\\t\\\\t],\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"print new line\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"Quick printf\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"qprint\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"printf(\\\\\\\\\\\\\\\"${1:text}%${2:type}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\", ${3:var});\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Formated printf\\\\\\\"\\\\n\\\\t},\\\\n\\\\n\\\\t\\\\\\\"Default template\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"tp-default\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\t\\\\\\\"#include <stdio.h>\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"int main(int argc, char const *argv[])\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"{\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    \\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    return 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"}\\\\\\\"\\\\n\\\\t\\\\t],\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Default template\\\\\\\"\\\\n\\\\t},\\\\n\\\\n\\\\t\\\\\\\"arg_template\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"arg_template\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\t\\\\\\\"while(--argc > 0 && ((*++argv)[0] == '-')) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    while (c = *++argv[0]) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"        switch (c) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"            case '$1':\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"                ${2:/* code */}\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"                break;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"            default:\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"                printf(\\\\\\\\\\\\\\\"error: option %c unknown\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\", c);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"                argc = 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"                break;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"        }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"}\\\\\\\"\\\\n\\\\t\\\\t],\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Template for using argument\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"CLI window main loop\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"tp-cli-window-loop\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t\\\\t\\\\t\\\\\\\"#include \\\\\\\\\\\\\\\"include/libterm.h\\\\\\\\\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"#include <stdlib.h>\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"#define ON  1\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"#define OFF 0\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"int main(void)\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"{\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    int prgm_state = ON;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    cursor_pos = 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    WINDOW_TITLE(${1});\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    init_screen(${2:height}, ${3:width});   \\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    main_screen();\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    refresh();\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    do {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"        if ((prgm_state = get_input()) == OFF) {\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"            EXIT_SCREEN();\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"            exit(EXIT_SUCCESS);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"        }\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    }while (1);\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"    return 0;\\\\\\\",\\\\n\\\\t\\\\t\\\\t\\\\\\\"}\\\\\\\"\\\\n\\\\t\\\\t],\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Template for creating a window for a CLI program\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putout\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putout\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putchar_fd('${1}', STDOUT_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print character to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putin\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putin\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putchar_fd('${1}', STDIN_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print character to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"puterr\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"puterr\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putchar_fd('${1}', STDERR_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print character to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putsout\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putsout\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putstr_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDOUT_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putsin\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putsin\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putstr_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDIN_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putserr\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putserr\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putstr_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDERR_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnlout\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnlout\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putendl_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDOUT_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string and a new line to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnlin\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnlin\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putendl_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDIN_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string and a new line to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnlerr\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnlerr\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putendl_fd(\\\\\\\\\\\\\\\"${1}\\\\\\\\\\\\\\\", STDERR_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print string and a new line to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnbr_out\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnbout\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putnbr_fd(${1}, STDOUT_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print number to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnbr_in\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnblin\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putnbr_fd(${1}, STDIN_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print number to stdout\\\\\\\"\\\\n\\\\t},\\\\n\\\\t\\\\\\\"putnbr_err\\\\\\\": {\\\\n\\\\t\\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"putnberr\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"body\\\\\\\": \\\\\\\"ft_putnbr_fd(${1}, STDERR_FILENO);\\\\\\\",\\\\n\\\\t\\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Print number to stdout\\\\\\\"\\\\n\\\\t}\\\\n}\\\",\\\"csharp.json\\\":\\\"{\\\\n\\\\t// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and \\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\\\n\\\\t// same ids are connected.\\\\n\\\\t// Example:\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\n\\\\t// \\\\t],\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\n\\\\t// }\\\\n}\\\"}\"}"}